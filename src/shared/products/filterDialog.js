import styled from 'styled-components'
import { Button } from '@app/pages/commodity'
import { useState, useEffect } from 'react'
import { CATEGORY } from '@app/utils/constants'
import { dataStore, useSelector } from '@app/store'
import { Checkbox, Input } from 'antd'

const FilterType = {
  CommodityCategory: {
    key: 'commodityCategory',
    name: 'ÂïÜÂìÅÂ≠êÈ°ûÂà•',
    type: 'string',
  },
  Keyword: {
    key: 'keyword',
    name: 'ÈóúÈçµÂ≠ó',
    type: 'string',
    hideInSelected: true,
  },
  Manufacturer: {
    key: 'manufacturerName',
    name: 'Âª†ÂïÜ',
    type: 'string',
  },
  IsDiscount: {
    key: 'isDiscount',
    name: 'ÊäòÊâ£',
    type: 'bool',
    hideInSelected: true,
  },
  Tags: {
    key: 'tagIds',
    name: 'Ê®ôÁ±§',
    type: 'array',
  },
  Selected: {
    key: 'selected',
    name: 'Â∑≤ÈÅ∏ÔºàÈªûÊìäÁßªÈô§Ôºâ',
    hideInSelected: true,
  },
}

const FilterTypeByKey = Object.values(FilterType).reduce((acc, cur) => {
  acc[cur.key] = cur
  return acc
}, {})

console.log('üöÄ ~ FilterTypeByKey ~ FilterTypeByKey:', FilterTypeByKey)

export const DefaultFilterOptions = {}

const commodityCategoryOptions = {
  [CATEGORY.GACHA]: [
    { value: 'ÂÖ¨‰ªî', label: 'ÂÖ¨‰ªî' },
    { value: 'ÊâãËæ¶', label: 'ÊâãËæ¶' },
    { value: 'ÁçµÂ•á', label: 'ÁçµÂ•á' },
    { value: 'ÊñáÂâµ', label: 'ÊñáÂâµ' },
  ],
  [CATEGORY.BLIND_BOX]: [
    { value: 'Áé©ÂÖ∑', label: 'Áé©ÂÖ∑' },
    { value: 'ÊãºÂúñ', label: 'ÊãºÂúñ' },
    { value: 'Èõ∂È£ü', label: 'Èõ∂È£ü' },
    { value: 'ÂãïÊº´', label: 'ÂãïÊº´' },
    { value: 'È©öÂöáÂåÖ', label: 'È©öÂöáÂåÖ' },
  ],
  [CATEGORY.LUCKY_BAG]: [
    { value: 'Âª†ÂïÜÂõûÈ•ã', label: 'Âª†ÂïÜÂõûÈ•ã' },
    { value: 'Âá∫Ê∏Ö', label: 'Âá∫Ê∏Ö' },
    { value: 'ÊäòÊâ£ÂìÅ', label: 'ÊäòÊâ£ÂìÅ' },
    { value: 'ÈÄÅÁ¶èÂà©', label: 'ÈÄÅÁ¶èÂà©' },
    { value: 'ÁìúÂì•ÈÄÅÂπ∏Á¶è', label: 'ÁìúÂì•ÈÄÅÂπ∏Á¶è' },
  ],
  [CATEGORY.ICHIBAN]: [
    { value: 'ÈÅäÊà≤', label: 'ÈÅäÊà≤' },
    { value: 'ÈõªÂΩ±', label: 'ÈõªÂΩ±' },
    { value: 'Á∂ìÂÖ∏ËÅØÂêç', label: 'Á∂ìÂÖ∏ËÅØÂêç' },
    { value: 'Ê©üÁî≤Á≥ªÂàó', label: 'Ê©üÁî≤Á≥ªÂàó' },
  ],
  [CATEGORY.SPECIAL]: [
    { value: 'Ê§çÊ†Ω', label: 'Ê§çÊ†Ω' },
    { value: 'Ê¥ªÈ´îÈ°û', label: 'Ê¥ªÈ´îÈ°û' },
    { value: 'ÂØµÁâ©Áî®ÂìÅ', label: 'ÂØµÁâ©Áî®ÂìÅ' },
    { value: 'ÁîüÊ¥ªÁî®ÂìÅ', label: 'ÁîüÊ¥ªÁî®ÂìÅ' },
    { value: 'Âª†ÂïÜËá™Ë£Ω', label: 'Âª†ÂïÜËá™Ë£Ω' },
  ],
  [CATEGORY.OUTSIDE_WALL_WORLD]: [
    { value: 'Á≤æÂìÅ‰ª£Ë≥º', label: 'Á≤æÂìÅ‰ª£Ë≥º' },
    { value: 'ÈüìÂúòÂë®ÈÇä', label: 'ÈüìÂúòÂë®ÈÇä' },
    { value: '‰øùÈ§äÂìÅ', label: '‰øùÈ§äÂìÅ' },
    { value: 'ÂåñÂ¶ùÂìÅ', label: 'ÂåñÂ¶ùÂìÅ' },
    { value: 'ÊΩÆÊµÅÁé©Áâ©', label: 'ÊΩÆÊµÅÁé©Áâ©' },
    { value: 'ÈÅãÂãïÁî®ÂìÅ', label: 'ÈÅãÂãïÁî®ÂìÅ' },
    { value: 'ÊúçÈ£æÂìÅ', label: 'ÊúçÈ£æÂìÅ' },
  ],
  [CATEGORY.DIGITAL_WORLD]: [
    { value: 'Êô∫ÊÖßÂûãÊâãÊ©ü', label: 'Êô∫ÊÖßÂûãÊâãÊ©ü' },
    { value: 'Êô∫ËÉΩÂÆ∂Èõª', label: 'Êô∫ËÉΩÂÆ∂Èõª' },
    { value: 'ÈõªÂãï', label: 'ÈõªÂãï' },
    { value: 'ÈõªÁé©Âë®ÈÇä', label: 'ÈõªÁé©Âë®ÈÇä' },
  ],
}

const Mask = styled.div`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: ${(p) => p.theme.color.mask};
  border-radius: ${(p) => p.theme.borderRadius.content};
  z-index: ${(p) => p.theme.zIndex.mask};
`

const Container = styled.div`
  position: absolute;
  color: #000;
  opacity: 1;
  top: 5%;
  width: 60%;
  left: 20%;
  max-height: 70vh;
  z-index: ${(p) => p.theme.zIndex.dialog};
  display: flex;
  min-height: 250px;
  flex-direction: column;
  background: ${(p) => p.theme.color.background};
  border-radius: ${(p) => p.theme.borderRadius.dialogContainer};
  overflow-x: hidden;
  overflow-y: auto;
  display: flex;
  @media (max-width: 768px) {
    width: 90%;
    left: 5%;
  }
`

const Block = styled.div`
  display: flex;
  justify-content: space-around;
  width: 100%;
`

const Header = styled(Block)`
  position: relative;
  background-color: ${(p) => p.theme.color.red};
  top: 0;
  width: 105%;
  left: -2.5%;
  padding: 10px;
  border: 1px solid ${(p) => p.theme.color.red};
  color: white;
  h3 {
    margin: 0;
  }
`

const Footer = styled(Block)`
  position: relative;
  bottom: 0;
  left: 0;
  padding: 10px;
  justify-content: center;
  border-top: 1px solid ${(p) => p.theme.color.dialogBorder};
  div + div {
    margin-left: 1rem;
  }
`

const Content = styled(Block)`
  padding: 20px;
  flex-direction: column;
  overflow-y: auto;
  .ant-radio-group {
    display: flex;
    flex-direction: column;
    > * {
      margin-bottom: 0.5rem;
    }
  }
`

const Tag = styled.div`
  border-radius: 4px;
  padding: 0.5rem 1rem;
  background: ${(p) => p.theme.color.red};
  color: white;
  cursor: pointer;
  margin: 0.5rem 0.25rem 0 0;
`

const BaseSection = styled.div`
  margin-bottom: 0.5rem;
  h3 {
    display: block;
    margin: 0.5rem 0;
  }
  .content {
    display: flex;
    flex-wrap: wrap;
    h3 {
      margin-left: 0.5rem;
    }
  }
`

const SelectedTag = styled(Tag)`
  background: ${(p) => p.theme.color.orange};
  color: black;
`

export default function FilterDialog({
  onClose,
  category,
  filterOptions,
  setFilterOptions,
}) {
  const [selectedOptions, setSelectedOptions] = useState(filterOptions)
  const manufacturers = useSelector(() => dataStore.manufacturers)
  const tagsByCategory = useSelector(() => dataStore.tagsByCategory)
  const tags = tagsByCategory[category]
  useEffect(() => {
    if (!manufacturers) dataStore.getManufacturers()
  }, [manufacturers])

  useEffect(() => {
    if (!tags) dataStore.getTags(category)
  }, [tags])

  useEffect(() => {
    setSelectedOptions(filterOptions)
  }, [filterOptions])

  return (
    <>
      <Mask onClick={onClose} />
      <Container>
        <Header>
          <h3>ÁØ©ÈÅ∏</h3>
        </Header>
        <Content>
          <Section type={FilterType.Selected}>
            {Object.keys(selectedOptions).map((category) => {
              const setting = FilterTypeByKey[category]
              if (setting.hideInSelected) return null
              switch (setting.type) {
                case 'string':
                  if (!selectedOptions[category]) return null
                  return (
                    <SelectedTag
                      onClick={() =>
                        setSelectedOptions({
                          ...selectedOptions,
                          [category]: null,
                        })
                      }
                    >
                      {selectedOptions[category]}
                    </SelectedTag>
                  )
                case 'array':
                  if (
                    !selectedOptions[category] ||
                    !selectedOptions[category].length
                  )
                    return null
                  return selectedOptions[category]?.map((option) => {
                    return (
                      <SelectedTag
                        onClick={() =>
                          setSelectedOptions({
                            ...selectedOptions,
                            [category]: selectedOptions[category].filter(
                              (o) => o !== option
                            ),
                          })
                        }
                      >
                        {tags.find((t) => t.id === option)?.tagName}
                      </SelectedTag>
                    )
                  })
              }
            })}
          </Section>
          <Section type={FilterType.Manufacturer}>
            {manufacturers?.map((m) => {
              if (selectedOptions[FilterType.Manufacturer.key] === m.name)
                return null
              return (
                <Tag
                  key={m.id}
                  onClick={handleClick(FilterType.Manufacturer, m, 'name')}
                >
                  {m.name}
                </Tag>
              )
            })}
          </Section>
          <Section type={FilterType.Tags}>
            {tags?.map((m) => {
              if (selectedOptions[FilterType.Tags.key]?.includes(m.id))
                return null
              return (
                <Tag key={m.id} onClick={handleClick(FilterType.Tags, m, 'id')}>
                  {m.tagName}
                </Tag>
              )
            })}
          </Section>
          <Section type={FilterType.CommodityCategory}>
            {commodityCategoryOptions[category].map((m) => {
              if (selectedOptions[FilterType.CommodityCategory.key] === m.label)
                return null
              return (
                <Tag
                  key={m.id}
                  onClick={handleClick(
                    FilterType.CommodityCategory,
                    m,
                    'label'
                  )}
                >
                  {m.label}
                </Tag>
              )
            })}
          </Section>
          <Section type={FilterType.Keyword}>
            <Input
              value={selectedOptions[FilterType.Keyword.key]}
              onChange={(e) => {
                setSelectedOptions({
                  ...selectedOptions,
                  [FilterType.Keyword.key]: e.target.value,
                })
              }}
            />
          </Section>
          <Section>
            <Checkbox
              checked={selectedOptions[FilterType.IsDiscount.key]}
              onChange={(e) => {
                setSelectedOptions({
                  ...selectedOptions,
                  [FilterType.IsDiscount.key]: e.target.checked,
                })
              }}
            />
            <h3>ÊäòÊâ£</h3>
          </Section>
        </Content>
        <Footer>
          <Button onClick={onClose}>ÈóúÈñâ</Button>
          <Button onClick={onReset}>ÈáçÁΩÆ</Button>
          <Button onClick={onConfirm}>Á¢∫Ë™ç</Button>
        </Footer>
      </Container>
    </>
  )
  function handleClick(filterType, data, dataKey) {
    const key = filterType.key
    switch (filterType.type) {
      case 'string':
        return () => {
          setSelectedOptions({
            ...selectedOptions,
            [key]: data[dataKey],
          })
        }
      case 'array':
        return () => {
          setSelectedOptions({
            ...selectedOptions,
            [key]: [...(selectedOptions[key] || []), data[dataKey]],
          })
        }
      default:
        return () => {
          setSelectedOptions({
            ...selectedOptions,
            [key]: [...selectedOptions[key], data[dataKey]],
          })
        }
    }
  }
  function onConfirm() {
    setFilterOptions(selectedOptions)
    onClose()
  }
  function onReset() {
    setSelectedOptions({})
  }
}

function Section({ type, children }) {
  return (
    <BaseSection>
      {!!type?.name && <h3>{type.name}</h3>}
      <div className="content">{children}</div>
    </BaseSection>
  )
}
