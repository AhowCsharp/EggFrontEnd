import styled from 'styled-components'
import Layout from '@app/shared/layout'
import { useEffect, useState } from 'react'
import Products from '@app/shared/products'
import BaseCarousel from '@app/shared/carousel'
import Pagination from '@app/shared/products/pagination'
import { useSelector, dataStore } from '@app/store'
import {
  DEFAULT_COMMODITIES_PAGINATION,
  COMMODITY_STATUS,
} from '@app/utils/constants'
import headerImg from '@app/static/header.png'
import { url } from '@app/utils/paths'
import { useNavigate } from 'react-router-dom'
import newArrivalsImg from '@app/static/new-arrivals.png'
import Button from '@app/shared/products/button'
import AnnouncementModal from '@app/shared/announcementModal'
import HotCommodityBlock, { Header } from './hotCommodityBlock'
import CampaignBlock from './campaignBlock/index'
import { Helmet } from 'react-helmet';

export const DisplayPageSize = 4

//ÈôêÂà∂ÁÇ∫‰∏âÊ¢ù‰∏çË∑ëÁâà
const announcements = [
  {
    title: 'ÊàëÊòØÊÉ≥Á´ôËëóÔºåÈÇÑÊääË≥ûÊéô‰∫Ü',
    time: '2024Âπ¥11Êúà18Êó•',
    content: [
      'Êàë‰æÜÈµùÂüéÂè™Ëæ¶‰∏â‰ª∂‰∫ãÔºåÂÖ¨Âπ≥ÔºÅÂÖ¨Âπ≥ÔºÅÈÇÑÊòØÂÖ¨Âπ≥ÔºÅ ü§ñ',
      'ÁûáÈÇ£Ë≥û ÊúÄÂ§ßË≥£Èªû: ÁµïÂ∞çÁµïÂ∞çÂÖ¨Âπ≥ÁöÑÊ©üÁéá„ÄÅÁµï‰∏çÂèØËÉΩÂæåÂè∞ÈÄ†ÂÅá üö®',
      'ÊúÄ‰øùÈöúÊäΩÂÆ¢Ê¨äÁõäÁöÑÂπ≥Âè∞ÔºåÁµïÂ∞ç‰øùË≠â‰∏çËóèÁ±§‰∏ç‰ΩúÂºä üóø',
    ],
  },
  {
    title: 'ÈáëÊµÅÁ≥ªÁµ±ÂÖ¨Âëä',
    time: '2024Âπ¥11Êúà18Êó•',
    content: [
      'ATMËôõÊì¨Â∏≥Êà∂ËΩâÂ∏≥Ê≠£ÂºèÈñãÈÄö üÉè',
      'Âà∑Âç°ËΩâÂ∏≥Ê≠£ÂºèÈñãÈÄö üé≠',
    ],
  },
  {
    title: 'ÂØ∂ÁÆ±Á≥ªÁµ±‰∏äÁ∑ö',
    time: '2024Âπ¥11Êúà07Êó•',
    content: [
      'ÊØè‰∏ÄÊ¨°ÊäΩÁçéÈÉΩÊúâÊ©üÊúÉÁç≤ÂæóÂØ∂ÁÆ±ÊàñÈë∞Âåô üí•',
      'ÂñÆÊäΩÂÉπÊ†ºÊÑàÈ´òÔºåÁç≤ÂæóÈ´òÁ¥öÂØ∂ÁÆ±Ê©üÁéáÊÑàÈ´ò üàµ',
      '‰∏ÄÁµÑÂêåÁ≠âÁ¥öÈë∞ÂåôËàáÂØ∂ÁÆ±ÊâçËÉΩÈñãÂïüÔºåÂØ∂ÁÆ±Á≠âÁ¥öÊ±∫ÂÆöÁçéÂãµÂ§ßÂ∞è üâê',
    ],
  },
  {
    title: 'ÊØèÊó•Á∞ΩÂà∞‰ªãÁ¥π',
    time: '2024Âπ¥11Êúà01Êó•',
    content: [
      'ÊØèÂ§©ÂÉÖÂèØÊäΩÁçé‰∏ÄÊ¨°ÔºåÂáåÊô®12:00Âà∑Êñ∞ üÄÑ',
      'ÁçéÂãµÊúâÈáëÂπ£„ÄÅÂπ≥Âè∞ÊäΩÁçéÂà∏‰∏çÁ≠â üéØ',
      'Áï∂ÊúàÂÖ®Âã§ÊúÉÊñºÊúàÂ∫ïÁôºÊîæÂÖ®Âã§ÁçéÔºåÊú¨Á´ôÂæàÈáçË¶ñÂá∫Â∏≠Áéáder üèÖ',
    ],
  },
  {
    title: 'Á¥ÄÂøµÈáåÁ®ãÁ¢ë',
    time: '2024Âπ¥11Êúà07Êó• ÂáåÊô®00:18',
    content: [
      'ÊÅ≠Âñú Áé©ÂÆ∂ : Èô≥‰∏ñÂÆâ‚ú® ÊàêÁÇ∫ÈñãÂπï‰ª•‰æÜÈ¶ñ‰ΩçÂÑ≤ÂÄºÊ∂àË≤ªÁöÑÁé©ÂÆ∂ ü´∂',
      'ÂèØÂñúÂèØË≥Ä ‰ª•Ëå≤Á¥ÄÂøµ üéâ Êú¨Á´ôÁúü‰∏çÊòØË©êÈ®ô üò≠',
      'Ê≠°ËøéÈ°ßÂÆ¢‰ΩøÁî®Ëá™Ë∫´Êé®Ëñ¶Á¢ºÈÇÄË´ãÊúãÂèãÂä†ÂÖ• üéÅ È†òÂèñÂ•ΩÁ¶ÆÂ§ßÁçé üòç',
    ],
  },
]

const ImageContainer = styled.div`
  overflow: hidden;
  position: relative;
  border-radius: 20px;
  cursor: pointer;
  img {
    width: 100%;
    height: auto;
    @media (max-width: 768px) {
      margin: 0;
    }
  }
`

const Carousel = styled(BaseCarousel)`
  margin: 0px auto 50px;
  padding: 16px 8px;
  .slick-slide {
    opacity: 0.6;
    transform: scale(0.9);
    padding: 20px;
  }
  .slick-slide.slick-current + .slick-slide {
    opacity: 1;
    transform: scale(1.1);
    margin-top: 5px;
  }
  .slick-dots {
    bottom: -5px;
    z-index: ${(p) => p.theme.zIndex.dialog} !important;
    li {
      display: inline-flex;
      align-items: center;
      cursor: pointer;
    }
    .slick-active {
      width: 16px !important;
      div {
        opacity: 1;
        width: 0.5rem;
        height: 0.5rem;
        border-radius: 0.5rem;
      }
    }
  }
  @media (max-width: 768px) {
    .slick-slide.slick-current + .slick-slide,
    .slick-slide {
      opacity: 0.6;
      transform: scale(0.9);
    }
    .slick-slide.slick-current {
      opacity: 1;
      transform: scale(1.1);
      margin-top: 5px;
    }
  }
`

const Dots = styled.div`
  width: 0.375rem;
  height: 0.375rem;
  background-color: #fff;
  border-radius: 0.375rem;
  opacity: 0.4;
  position: relative;
`

const NewArrivalTag = styled.img.attrs({ src: newArrivalsImg })`
  position: absolute;
  top: 0;
  left: 0;
  width: 25% !important;
  height: auto !important;
`

export default function Home() {
  const commodities = useSelector(() => dataStore.commodities)
  const newAds = useSelector(() => dataStore.newAds)
  const news = useSelector(() => dataStore.news)
  const hotAds = useSelector(() => dataStore.hotAds)
  const goto = useNavigate()
  const [shouldSortDialogOpen, setShouldSortDialogOpen] = useState(false)

  useEffect(() => {
    const req = {
      status: COMMODITY_STATUS.OPENING,
      ...DEFAULT_COMMODITIES_PAGINATION,
    }
    dataStore.getCommodities(req)
    dataStore.getAds()
    dataStore.recordVisitCount()
  }, [])

  return (
    <>
     <Helmet>
        <script async src="https://www.googletagmanager.com/gtag/js?id=G-ENGGR9ZBNL"></script>
        <script>
          {`
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', 'G-ENGGR9ZBNL');
          `}
        </script>
      </Helmet>
      <AnnouncementModal announcements={announcements} />
      {newAds.length ? (
        <Carousel
          arrows
          infinite={true}
          autoplay={true}
          speed={700}
          autoplaySpeed={1500}
          dots={true}
          centerMode={false}
          slidesToShow={3}
          responsive={[
            {
              breakpoint: 768,
              settings: {
                slidesToShow: 1,
                centerMode: true,
              },
            },
          ]}
          customPaging={(i) => <Dots />}
        >
          {newAds.map((data, index) => (
            <ImageContainer key={index} onClick={handleClick(data)}>
              <img src={data.imgUrl} alt={data.name}/>
              <NewArrivalTag />
            </ImageContainer>
          ))}
        </Carousel>
      ) : null}
      <Layout>
        <CampaignBlock data={news} />
        <HotCommodityBlock data={hotAds} />
        <Header className="digital-font">
          <div className="block">
            <img src={headerImg} />
            ÂÖ®ÈÉ®ÂïÜÂìÅ
          </div>
          <div className="block">
            <Button onClick={() => setShouldSortDialogOpen(true)} />
          </div>
        </Header>
        <Products
          data={commodities?.data}
          shouldSortDialogOpen={shouldSortDialogOpen}
          setShouldSortDialogOpen={setShouldSortDialogOpen}
          shouldDisplayControlBar={false}
        />
        <Pagination
          onChange={(pageNumber, pageSize) => {
            const req = {
              pageNumber,
              pageSize,
            }
            dataStore.getCommodities(req)
          }}
          totalCount={commodities?.totalCount}
      />
      </Layout>
    </>
  )
  function handleClick(data) {
    return () => {
      goto(url.commodity({ commodityId: data.id }))
    }
  }
}
